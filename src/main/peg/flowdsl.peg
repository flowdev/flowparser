start = SpcCom Version Flow+ EOF										{flowFile} ;
Version = "version" ASpc Natural "." Natural SpcCom						{version};
Flow = FlowStart "{" SpcCom Connections "}" SpcCom		                {flow} ;
FlowStart = "flow" ASpc BigIdent SpcCom									{flowStart} ;


//
// Rules for the connections section of a flow:
//
Connections			= ConnectionChain+ 		       	{connections} ;
ConnectionChain		= ConnectionChainBeg ConnectionChainMid* OpConnectionChainEnd StmtEnd	{connectionChain} ;
ConnectionChainBeg	= OpPort ConnectionChainMid		{connectionChainBegMax}
					/ OperationNameParens OpPort	{connectionChainBegMin} ;
ConnectionChainMid	= Arrow ConnectionPart			{connectionChainMid} ;
OpConnectionChainEnd= ConnectionChainEnd?			{opConnectionChainEnd} ;
ConnectionChainEnd	= Arrow OpPort					{connectionChainEnd} ;

ConnectionPart		= OpPortSpc OperationNameParens OpPort				{connectionPart} ;
OperationNameParens	= OpOperationName "(" Spc OpOperationType ")" Spc	{operationNameParens} ;
OpOperationName		= OperationName?				{opOperationName} ;
OperationName		= SmallIdent Spc				{operationName} ;
OpOperationType		= OperationType?				{opOperationType} ;
OperationType		= BigIdent Spc					{operationType} ;
Arrow			= SpcCom OpDataType "->" SpcCom     {arrow} ;
OpDataType		= DataType?							{opDataType} ;
DataType		= "[" Spc BigIdent Spc "]"			{dataType} ;
OpPortSpc		= PortSpc?							{opPortSpc} ;
OpPort			= Port?			    				{opPort} ;
PortSpc			= Port ASpc		    				{portSpc} ;
Port		    = SmallIdent PortNum?				{port} ;
PortNum		    = "." Natural						{portNum} ;


//
// Generic reusable rules:
//
StmtEnd			= SpcCom ";" SpcCom ;
BigIdent		= [A-Z] WordChar+ ;
SmallIdent		= [a-z] WordChar* ;
WordChar		= [A-Z] / [a-z] / [0-9] ;

String			= ["] Char* ["]						{unescapeString} ;
Char			= "\\u" Hex Hex Hex Hex				{unicodeChar}
				/ "\\t"								{tabChar}
				/ "\\n"								{newlineChar}
				/ "\\r"								{carriagereturnChar}
				/ !"\\u" "\\"_						{backslashChar}
				/ ^[\r\n\\"]						{simpleChar} ;

Int				= [-+]? Natural						{integer} ;
Natural			= "0x" Hex+ ( "_"+ Hex+ )*			{hexInt}
				/ "0b" Binary+ ( "_"+ Binary+ )*	{binaryInt}
				/ "0c" Octal+ ( "_"+ Octal+ )*		{octalInt}
				/ Decimal+ ( "_"+ Decimal+ )*		{decimalInt} ;
Decimal			= [0-9] ;
Hex				= [0-9] / [a-f] / [A-F] ;
Binary			= [0-1] ;
Octal			= [0-7] ;

SpcCom			= ( AnySpace / Comment )* ;
AnySpace		= [ \t\r\n]+ ;
Comment			= "//" _*+ EOL
				/ "/*" _*+ "*/" ;
Spc				= ASpc? ;
ASpc			= [ \t]+ ;
EOL				= [\r]? [\n] / EOF ;
EOF				= !_ ;
